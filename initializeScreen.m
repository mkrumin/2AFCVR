function ScreenInfo = initializeScreen(WhichScreen)% gets the screen info% finds out the appropriate values for black, white, and gray% ScreenInfo = initializeScreen(WhichScreen);%% ScreenInfo = initializeScreen() with no arguments will use RigInfoGet VS% screen%global EXPAssertOpenGL;InitializeMatlabOpenGL(1);if nargin<1endtry    RigInfo = RigInfoGet;catch    warning('RigInfoGet failed to load system parameters');    disp('Making a fictitious Screen structure');  % SK why do we need this?    ScreenInfo.PixelSize  = 0.0609;    ScreenInfo.Xmax       = 640;    ScreenInfo.Ymax       = 480;    ScreenInfo.FrameRate  = 124.8918;    ScreenInfo.Dist       = 64;    returnendif nargin<1    ScreenInfo.WhichScreen = RigInfo.VsDisplayScreen;else    % in case if we want to override system's defaults    ScreenInfo.WhichScreen = WhichScreen;endScreenInfo.whiteIndex = WhiteIndex(ScreenInfo.WhichScreen);ScreenInfo.blackIndex = BlackIndex(ScreenInfo.WhichScreen);ScreenInfo.grayIndex = round((ScreenInfo.whiteIndex+ScreenInfo.blackIndex)/2);% Make sure that on floating point framebuffers we still get a well defined grayif ScreenInfo.grayIndex == ScreenInfo.whiteIndex    ScreenInfo.grayIndex = ScreenInfo.whiteIndex / 2;end%ScreenInfo.PixelDepth = 8; % SK: what is this used for?Screen('CloseAll');WaitSecs(0.5);% the following line needs be enabled for proper linear superposition%[windowPtr, ScreenRect] = Screen('OpenWindow', WhichScreen, [], [], ScreenInfo.PixelDepth, [], [], [], kPsychNeed16BPCFloat);% SK [windowPtr, ScreenRect] = Screen('OpenWindow', WhichScreen, [], [], ScreenInfo.PixelDepth);% SK Screen('BlendFunction', windowPtr, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); % needed for alpha blending (LB 071019)% SK Screen('FillRect', windowPtr, gray); Screen('Flip', windowPtr);		% force gray screen% Open a double buffered fullscreen window and set default background color to grayif EXP.doUndistortion    PsychImaging('PrepareConfiguration');    PsychImaging('AddTask', 'AllViews', 'GeometryCorrection', 'bbb.mat');    % PsychImaging('AddTask', 'AllViews', 'GeometryCorrection', 'undZero.mat');    PsychImaging('AddTask', 'AllViews', 'FlipHorizontal');    % PsychImaging('AddTask', 'General', 'UseFastOffscreenWindows');    [ScreenInfo.windowPtr, ScreenInfo.screenRect] = PsychImaging('OpenWindow', ScreenInfo.WhichScreen, ScreenInfo.grayIndex);else    [ScreenInfo.windowPtr, ScreenInfo.screenRect]=Screen('OpenWindow', ScreenInfo.WhichScreen, ScreenInfo.grayIndex);end% Enable alpha blendingScreen('BlendFunction', ScreenInfo.windowPtr, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);ScreenInfo.Xmax = RectWidth(ScreenInfo.screenRect);ScreenInfo.Ymax = RectHeight(ScreenInfo.screenRect);ScreenInfo.FrameRate = FrameRate(ScreenInfo.WhichScreen);% make a linear Clut (do this even though you will do ltLoadCalibration later!!!)Screen('LoadNormalizedGammaTable', ScreenInfo.WhichScreen, repmat( (0:255)', 1, 3)/255);ScreenInfo.MonitorType = RigInfo.MonitorType;ScreenInfo.MonitorSize = RigInfo.MonitorSize; % cm - horizontalScreenInfo.MonitorHeight = RigInfo.MonitorHeight; % cm - VerticalScreenInfo.CalibrationDir = RigInfo.VsHostCalibrationDir;ScreenInfo.Dist = RigInfo.DefaultMonitorDistance;ScreenInfo.SyncSquare = RigInfo.SyncSquare;ScreenInfo.PixelSize = ScreenInfo.MonitorSize/ScreenInfo.Xmax; % size of pixeldisp(['You are using a ' ScreenInfo.MonitorType]);disp(['The refresh rate is ' num2str(ScreenInfo.FrameRate,'%3.3f') ' Hz']);fprintf('The resolution is %dx%d pixels.\n', ScreenInfo.Xmax, ScreenInfo.Ymax);